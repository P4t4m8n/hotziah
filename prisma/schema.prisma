enum Permission {
  ADMIN
  MODERATOR
  USER
  THERAPIST
}

enum ForumType {
  PUBLIC
  PRIVATE
  RESTRICTED
  TECHNICAL
}

enum ForumSubject {
  GENERAL
  MENTAL_HEALTH
  ADDICTION
  RELATIONSHIPS
  GRIEF
  TRAUMA
  ANXIETY
  DEPRESSION
  BIPOLAR
  SCHIZOPHRENIA
  PTSD
  OCD
  ADHD
  AUTISM
  ASPERGERS
  EATING_DISORDERS
  SUPPORT
  THERAPY_SUPPORT
}

enum MeetingType {
  IN_PERSON
  VIDEO
  PHONE
}

enum Languages {
  ENGLISH
  HEBREW
  ARABIC
  RUSSIAN
  SPANISH
  FRENCH
  YIDDISH
}

enum Gender {
  MAN
  FEMALE
  NON_BINARY
}

enum TherapistEducation {
  PSYCHOLOGY
  PSYCHIATRY
  SOCIAL_WORK
  COUNSELING
  PSYCHOTHERAPY
  BACHELOR
  MASTER
  PHD
  MD
  LCSW
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  YES_NO
  SCALE
}

enum TherapistStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String          @unique
  firstName     String          @default("New User")
  lastName      String          @default("New User")
  password      String
  imgUrl        String          @default("imgs/avatarDefault.svg")
  permission    Permission      @default(USER)
  isTherapist   Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  therapistType String?
  forum         Forum[]
  post          Post[]
  comments      Comment[]
  therapist     Therapist?
  questionnaire Questionnaire[]
  article       Article[]
  likes         Like[]
}

model Forum {
  id          String   @id @default(uuid())
  title       String   @default("New Forum")
  description String   @default("New Forum")
  type        String   @default("Public")
  subjects    String[] @default(["General"])
  admins      User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id        String    @id @default(uuid())
  title     String    @default("New Post")
  content   String    @default("New Post")
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  forumId   String
  tags      String[]  @default([])
  isPinned  Boolean   @default(false)
  forum     Forum     @relation(fields: [forumId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String    @id @default(uuid())
  isPinned  Boolean   @default(false)
  content   String    @default("New Comment")
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  likes     Like[]
}

model Therapist {
  id          String          @id @default(uuid())
  summary     String          @default("")
  phone       String          @default("")
  subjects    String[]        @default([])
  userId      String          @unique
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId   String?
  address     Address?        @relation("TherapistAddress")
  status      TherapistStatus @default(PENDING)
  gender      Gender          @default(MAN)
  languages   String[]        @default(["Hebrew"])
  meetingType String[]        @default(["In Person"])
  education   String[]        @default(["Psychology"])
}

model Address {
  id           String    @id @default(uuid())
  city         String
  street       String?   @default("")
  number       String?   @default("")
  zipCode      String?   @default("")
  entrance     String?   @default("")
  floor        String?   @default("")
  isAccessible Boolean
  therapist    Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade, name: "TherapistAddress")
  therapistId  String    @unique
}

model Questionnaire {
  id             String    @id @default(uuid())
  title          String    @default("New Questionnaire")
  description    String    @default("New Questionnaire")
  subjects       String[]  @default(["New"])
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  rootQuestionId String?
  rootQuestion   Question? @relation("RootQuestion", fields: [rootQuestionId], references: [id])
  createdAt      DateTime  @default(now())

  @@index([authorId])
}

model Question {
  id                String          @id @default(uuid())
  questionText      String          @default("New Question")
  type              QuestionType    @default(TEXT)
  answers           Answer[]        @relation("QuestionAnswers")
  nextQuestions     Answer[]        @relation("NextQuestion")
  rootQuestionnaire Questionnaire[] @relation("RootQuestion")

  @@index([id])
}

model Answer {
  id             String    @id @default(uuid())
  answerText     String    @default("New Answer")
  questionId     String
  question       Question  @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  nextQuestionId String?
  nextQuestion   Question? @relation("NextQuestion", fields: [nextQuestionId], references: [id])

  @@index([id])
}

model Article {
  id          String   @id @default(uuid())
  title       String   @default("New Article")
  description String   @default("New Article")
  imgUrl      String
  content     Json
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes       Like[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@unique([userId, articleId])
}

model Taxonomy {
  id    String   @id @default(uuid())
  name  String
  enums String[]
}
